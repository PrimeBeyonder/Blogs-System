// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BlogVisibility {
  ONLY_ME
  FOLLOWERS
  PUBLIC
}

model User {
  id                   String                 @id @default(uuid())
  email                String                 @unique
  username             String                 @unique
  password             String
  isVerified           Boolean                @default(false)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt

  firstName            String?                
  lastName             String?                
  location             String?                // e.g., City, Country
  about                String?                // Extended user description
  
  profile              Profile?
  blogs                Blog[]
  comments             Comment[]
  likes                Like[]
  favorites            Favorite[]
  // Self-referencing relations for following functionality:
  following            Follow[]               @relation("following")
  followers            Follow[]               @relation("followers")
  verificationTokens   VerificationToken[]
  passwordResetTokens  PasswordResetToken[]
}

model Profile {
  id         String   @id @default(uuid())
  bio        String?            // Short biography
  pfp        String?            // URL for profile picture 
  birthdate  DateTime?
  website    String?            // Personal or professional website nullable

  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique
}

model Blog {
  id             String          @id @default(uuid())
  title          String
  subtitle       String?         // Extended title or tagline
  description    String          // Short description of the blog post
  content        String          // Main content (can be Markdown/HTML)
  
  // Additional rich content fields for blogs
  excerpt        String?         // A summary or teaser of the blog post
  featuredImage  String?         // URL for the featured image
  readingTime    Int?            // Estimated reading time in minutes
  
  visibility     BlogVisibility  @default(PUBLIC)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  author         User            @relation(fields: [authorId], references: [id])
  authorId       String
  // Blog images â€“ application logic should ensure only 1 to 5 images are added per blog.
  images         BlogImage[]
  // Many-to-many relation with tags via the join table
  tags           BlogTag[]
  comments       Comment[]
  likes          Like[]
  favorites      Favorite[]
}

model BlogImage {
  id      String  @id @default(uuid())
  url     String
  blog    Blog    @relation(fields: [blogId], references: [id])
  blogId  String
}

model Tag {
  id    String    @id @default(uuid())
  name  String    @unique
  blogs BlogTag[]
}

model BlogTag {
  id      String  @id @default(uuid())
  blog    Blog    @relation(fields: [blogId], references: [id])
  blogId  String
  tag     Tag     @relation(fields: [tagId], references: [id])
  tagId   String

  @@unique([blogId, tagId])
}

model Comment {
  id        String    @id @default(uuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  blog      Blog      @relation(fields: [blogId], references: [id])
  blogId    String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
}

model Like {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  blog      Blog      @relation(fields: [blogId], references: [id])
  blogId    String
  user      User      @relation(fields: [userId], references: [id])
  userId    String

  @@unique([blogId, userId])
}

model Favorite {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  blog      Blog      @relation(fields: [blogId], references: [id])
  blogId    String
  user      User      @relation(fields: [userId], references: [id])
  userId    String

  @@unique([blogId, userId])
}

model Follow {
  id          String   @id @default(uuid())
  follower    User     @relation("following", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("followers", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model VerificationToken {
  id         String   @id @default(uuid())
  token      String   @unique
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  user       User     @relation(fields: [userId], references: [id])
  userId     String
}

model PasswordResetToken {
  id         String   @id @default(uuid())
  token      String   @unique
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  user       User     @relation(fields: [userId], references: [id])
  userId     String
}
